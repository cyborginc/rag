pipeline {
    agent {
        kubernetes {
            yaml '''
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: docker
    image: docker:dind
    securityContext:
      privileged: true
    volumeMounts:
    - name: dind-storage
      mountPath: /var/lib/docker
  - name: git
    image: bitnami/git:latest
    command:
    - cat
    tty: true
  volumes:
  - name: dind-storage
    emptyDir: {}
            '''
            defaultContainer 'git'
        }
    }

    environment {
        DOCKER_IMAGE_NAME = 'python-test-image'
        TEST_RESULTS_DIR = 'test-results'
        WORKSPACE_DIR = "${WORKSPACE}/build"
    }

    options {
        gitLabConnection('gitlab')
        gitlabBuilds(builds: ['build'])
    }

    stages {
        stage('Git Setup and Merge') {
            steps {
                script {
                    echo "Source Branch: ${env.gitlabSourceBranch}"
                    echo "Target Branch: ${env.gitlabTargetBranch}"
                    echo "MR ID: ${env.gitlabMergeRequestIid}"
                    
                    withCredentials([usernamePassword(credentialsId: 'be1c8832-6e44-4a7a-a8b0-16448736b844', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                        sh """
                            rm -rf ${WORKSPACE_DIR}
                            mkdir -p ${WORKSPACE_DIR}
                            cd ${WORKSPACE_DIR}
                            
                            # Set Git credentials
                            git config --global credential.helper store
                            echo 'https://$GIT_USERNAME:$GIT_PASSWORD@gitlab-master.nvidia.com' > ~/.git-credentials
                            chmod 600 ~/.git-credentials
                            
                            # Clone and merge
                            git clone https://gitlab-master.nvidia.com/chat-labs/OpenSource/rag.git .
                            git checkout main
                            git fetch origin "${env.gitlabSourceBranch ?: 'main'}"
                            git merge "origin/${env.gitlabSourceBranch ?: 'main'}"
                        """
                    }
                }
            }
        }

        stage('Build Test Image') {
            steps {
                dir("${WORKSPACE_DIR}") {
                    container('docker') {
                        script {
                            sh """
                                docker build --network=host --no-cache \
                                -t \${DOCKER_IMAGE_NAME} \
                                -f tests/Dockerfile .
                            """
                        }
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                dir("${WORKSPACE_DIR}") {
                    container('docker') {
                        script {
                            try {
                                sh """
                                    mkdir -p ${WORKSPACE_DIR}/test-results
                                    docker run -v ${WORKSPACE_DIR}:/app/workspace \${DOCKER_IMAGE_NAME} python -m pytest -v -s \
                                    --cov=src \
                                    --junitxml=/app/workspace/test-results/test-results.xml \
                                    tests/
                                """
                            } finally {
                                junit allowEmptyResults: true, testResults: "**/${TEST_RESULTS_DIR}/test-results.xml"
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            updateGitlabCommitStatus name: 'build', state: 'success'
        }
        failure {
            updateGitlabCommitStatus name: 'build', state: 'failed'
        }
        always {
            script {
                container('docker') {
                    sh '''
                        docker ps -a | grep \${DOCKER_IMAGE_NAME} | awk '{print $1}' | xargs -r docker rm -f
                        docker rmi -f \${DOCKER_IMAGE_NAME} || true
                    '''
                }
            }
        }
    }
} 
